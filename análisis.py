# -*- coding: utf-8 -*-
"""Análisis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IgGsebdiJRAdXOeW7I9wXXZQAtyPXlXQ

Install dependencies
"""
#%reset -f

!pip install psycopg2

"""Import libraries"""

import psycopg2
import numpy as np
import pandas as pd

pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)

"""[Connect to database](https://pynative.com/python-postgresql-tutorial/)"""

try:
    connection = psycopg2.connect(user = "postgres",
                                  password = "Welcome01",
                                  host = "34.78.89.69",
                                  port = "5432",
                                  database = "dataproject1")

    cursor = connection.cursor()
    # Print PostgreSQL Connection properties
    print ( connection.get_dsn_parameters(),"\n")

    # Print PostgreSQL version
    cursor.execute("SELECT version();")
    record = cursor.fetchone()
    print("You are connected to - ", record,"\n")

except (Exception, psycopg2.Error) as error :
    print ("Error while connecting to PostgreSQL", error)

"""Obtain "datos" of the cities and columns names"""

cursor.execute("SELECT * FROM datos;")
record = cursor.fetchall()

cursor.execute("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'datos'")
columns_name = cursor.fetchall()

"""Convert array of arrays to single array"""

array_columns_name = np.array(columns_name)
array_columns_name = np.concatenate( array_columns_name, axis=0 )

print(array_columns_name)

"""Transform result of query to a pandas dataframe"""

df = pd.DataFrame(record, columns=array_columns_name)

df.head()

"""Obtain "clientes" of the clients responses"""

cursor.execute("SELECT * FROM clientes;")
record = cursor.fetchall()

cursor.execute("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'clientes'")
columns_name = cursor.fetchall()

array_columns_name = np.array(columns_name)
array_columns_name = np.concatenate( array_columns_name, axis=0 )

clientes = pd.DataFrame(record, columns=array_columns_name)

clientes.head()

df['score'] = 0

"""Pollution Variable"""

env_score = clientes.iloc[0].enviromental_score
pollution_cities = pd.Dataframe()
print(env_score)
if env_score == 5:
  min = df.pollution.min()
  df.score[df.pollution == min] = df.score[df.pollution == min]+1
  pollution_cities = df[df.pollution == min]
elif env_score == 4:
  order_by_pollution = df.sort_values(by=['pollution'], ascending=True)
  mins = order_by_pollution.iloc[:2]
  for _, i in mins.iterrows():
    df.score[df.city_id == i.city_id] += 1
    pd.concat([pollution_cities, i])
elif env_score == 3:
  order_by_pollution = df.sort_values(by=['pollution'], ascending=True)
  mins = order_by_pollution.iloc[:3]
  for _, i in mins.iterrows():
    df.score[df.city_id == i.city_id] += 1
    pd.concat([pollution_cities, i])
elif env_score == 2:
  order_by_pollution = df.sort_values(by=['pollution'], ascending=True)
  mins = order_by_pollution.iloc[:4]
  for _, i in mins.iterrows():
    df.score[df.city_id == i.city_id] += 1
    pd.concat([pollution_cities, i])
elif env_score == 1:
  order_by_pollution = df.sort_values(by=['pollution'], ascending=True)
  mins = order_by_pollution.iloc[:5]
  for _, i in mins.iterrows():
    df.score[df.city_id == i.city_id] += 1
    pd.concat([pollution_cities, i])

df.head()

"""Work Spaces Variable"""

wk_space = clientes.iloc[0].work_preference
if wk_space == 'Co-Working':
  ratio = df['work_spaces'] /df['c_population']
  aux = df
  aux['ratio'] = ratio*100
  aux.loc[aux.ratio > 0.006, 'score'] +=1
  wk_cities = aux.loc[aux.ratio>0.006]
  print(aux.head())

wk_cities

"""Transport Variable"""

a = {'Walking': 'Andando', 'Car': 'Coche', 'Bike': 'Bici', 'Motorbike': 'Moto', 'Bus/Trolleybus': 'Bus', 'Tram/Streetcar': 'Tranvía', 'Train/Metro': 'Metro'}
df.best_mobility_option.replace(a, inplace=True)

clientex = clientes.iloc[0].transport
df.score[df.best_mobility_option == clientex]+=1
print(df.head())
transport_cities = df.loc[df.best_mobility_option == clientex]


""""
cliente = clientes.iloc[0].transport
for _, i in df.iterrows():
  if i.best_mobility_option == cliente:
    df.score[df.city_id == i.city_id] += 1
print(df.head())
""""

cliente= clientes.iloc[0]

#df.loc[(df.mountain == True & cliente.place_score == 'Montaña' & df.beach  == False, 'score'] =+ 1

"""Landscape Variable"""

landscape_cities = pd.DataFrame()
for _, i in df.iterrows():
  if i.mountain == True and i.beach == False and cliente.place_score == 'Montaña':
    df.score[df.city_id == i.city_id] += 1
    landscape_cities = pd.concat([landscape_cities, i])
  elif i.mountain == False and i.beach == True and cliente.place_score == 'Playa':
    df.score[df.city_id == i.city_id] += 1
    landscape_cities = pd.concat([landscape_cities, i])
  elif i.mountain == True and i.beach == True and cliente.place_score == 'Ambos':
    df.score[df.city_id == i.city_id] += 1
    landscape_cities = pd.concat([landscape_cities, i])
  elif i.mountain == False and i.beach == False and cliente.place_score == 'Ninguno':
    df.score[df.city_id == i.city_id] += 1
    landscape_cities = pd.concat([landscape_cities, i])
df.score[landscape_cities.city_id == df.city_id] += 1


"""Weather Variable"""

weather_cities = pd.DataFrame()
for _, i in df.iterrows():
  if i.c_temp < 15 or i.c_rainy_days > 20 and cliente.season == 'Invierno':
    df.score[df.city_id == i.city_id] += 1
    weather_cities = pd.concat([weather_cities, i])
  elif 15 <= i.c_temp <= 25 or  10 <= i.c_rainy_days <= 20 and cliente.season == 'Primavera':
    df.score[df.city_id == i.city_id] += 1
    weather_cities = pd.concat([weather_cities, i])
  elif i.c_temp > 25 or i.c_rainy_days < 10 and cliente.season == 'Verano':
    df.score[df.city_id == i.city_id] += 1
    weather_cities = pd.concat([weather_cities, i])
  elif 15 <= i.c_temp <= 25 or  10 <= i.c_rainy_days <= 20 and cliente.season == 'Otoño':
    df.score[df.city_id == i.city_id] += 1
    weather_cities = pd.concat([weather_cities, i])

"""Housing Variable"""

housing_cities = pd.DataFrame()
for _, i in df.iterrows():
  if i.housing and cliente.percentaje_home > 50:
    df.score[df.city_id == i.city_id] += 1
    housing_cities = pd.concat([housing_cities, i])
  elif i.housing < 15 and 30 <= cliente.percentaje_home <= 50:
    df.score[df.city_id == i.city_id] += 1
    housing_cities = pd.concat([housing_cities, i])
  elif i.housing < 5 and cliente.percentaje_home < 30:
    df.score[df.city_id == i.city_id] += 1
    housing_cities = pd.concat([housing_cities, i])

"""Size Variable"""

size_cities = pd.DataFrame()
for _, i in df.iterrows():
  if i.c_population < 2000000 and cliente.size_preference == 'Pequeñas':
    df.score[df.city_id == i.city_id] += 1
    size_cities = pd.concat([size_cities, i])
  elif 2000000 <= i.c_population <= 4000000 and cliente.size_preference == 'Medianas':
    df.score[df.city_id == i.city_id] += 1
    size_cities = pd.concat([size_cities, i])
  elif i.c_population > 4000000 and cliente.size_preference == 'Grandes':
    df.score[df.city_id == i.city_id] += 1
    size_cities = pd.concat([size_cities, i])

"""Leisure Variable"""

leisure_cities = pd.DataFrame()
if cliente.entreteiment == 'Sí':
  max = df.leisure.max()
  df.score[df.leisure == max] = df.score[df.leisure == min]+1
  leisure_cities = df[df.leisure == max]

"""Non-client Variables"""

min = df.cpi.min()
df.score[df.cpi == min] += 0.5

max = df.gdp_pc.max()
df.score[df.gdp_pc == max] += 0.5

min = df.tax_burden.min()
df.score[df.tax_burden == min] += 0.5

min = df.crime_rate.min()
df.score[df.crime_rate == min] += 0.5

max = df.hdi.max()
df.score[df.hdi == max] += 0.5

max = df.doing_business.max()
df.score[df.doing_business == max] += 0.5

max = df.freedom.max()
df.score[df.freedom == max] += 0.5

max = df.life_expectancy.max()
df.score[df.life_expectancy == max] += 0.5

"""Factor"""

factor = clientes.iloc[0].interest_variable
if factor == 'Medio ambiente':
  for _, i in pollution_cities:
    df.score[i.city_id == df.city_id]=+1
elif factor == 'Zona de trabajo':
  for _, i in wk_cities:
    df.score[i.city_id == df.city_id]=+1
elif factor == 'Tamaño de la ciudad':
  for _, i in size_cities:
    df.score[i.city_id == df.city_id]=+1
elif factor == 'Ocio':
  for _, i in leisure_cities:
    df.score[i.city_id == df.city_id]=+1
elif factor == 'Gasto en vivienda':
  for _, i in economy_cities:
    df.score[i.city_id == df.city_id]=+1
elif factor == 'Clima':
  for _, i in weather_cities:
    df.score[i.city_id == df.city_id]=+1
elif factor == 'Movilidad urbana':
  for _, i in transport_cities:
    df.score[i.city_id == df.city_id]=+1
elif factor == 'Paisaje':
  for _, i in landscape_cities:
    df.score[i.city_id == df.city_id]=+1

"""ELEGIR CIUDAD"""

df[df.score == df.score.max()]
